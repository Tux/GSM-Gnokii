#!/pro/bin/perl

use strict;
use warnings;
use autodie;

sub usage
{
    my $err = shift and select STDERR;
    print "usage: $0 [ --verbose=# ] [ --to=recipient ] [ --msg=message ]\n";
    exit $err;
    } # usage

use Getopt::Long qw(:config bundling nopermute);
my $opt_v = 0;
my $msg   = "";
my $to    = "";
GetOptions (
    "help|?"		=> sub { usage (0); },

    "m|msg|message=s"	=> \$msg,
    "t|to|recipient=s"	=> \$to,
    "v|verbose:1"	=> \$opt_v,
    ) or usage (1);

use Data::Peek;
use GSM::Gnokii;
use List::Util qw( max );
use Tk;
use Tk::BrowseEntry;

$opt_v and print STDERR "Connecting ...\n";
my $gsm = GSM::Gnokii->new ()->connect;
$opt_v and print STDERR "Get signal strength ...\n";
my $ns  = $gsm->GetRF ();
$opt_v and print STDERR "Get power status ...\n";
my $ps  = $gsm->GetPowerStatus ();
$opt_v and print STDERR "Read phonebook ...\n";
my @pb =
    sort { $a->[2] cmp $b->[2] }
    grep { $to ? "@$_" =~ m/$to/i : 1 }
    map  {
	my $idx  = $_->{location};
	my $name = $_->{name};
	if (my $p = $_->{person}) {
	    $p->{family_name} && $p->{given_name} and
		$name = join " " => $p->{given_name}, $p->{family_name};
	    }
	my $number = $_->{tel_cell} || $_->{number};
	[ $idx, $number, $name ];
	}
    @{$gsm->ReadPhonebook ("ME", 1, 0) || []};
#$gsm->disconnect;

my $status = "";

if ($msg =~ m/\S/ && @pb == 1) {
    $opt_v and print STDERR "Sending message ...\n";
    my $err = send_msg ($pb[0][1], $msg);
    print "$status\n";
    exit $err;
    }

$opt_v and print STDERR "Starting GUI ...\n";

my $mw = MainWindow->new;

my $font = "{DejaVu Sans Mono} 8";

my $f_sig = $mw->Frame->pack (-side =>"top", -anchor => "nw", -fill => "both", -expand => 1);
my $f_tgt = $mw->Frame->pack (-side =>"top", -anchor => "nw", -fill => "both", -expand => 1);
my $f_msg = $mw->Frame->pack (-side =>"top", -anchor => "nw", -fill => "both", -expand => 1);
my $f_btn = $mw->Frame->pack (-side =>"top", -anchor => "nw", -fill => "both", -expand => 1);

my ($t_number, $t_name, $t_entry) = ("number", "name", "");
$f_tgt->Label (
    -text		=> "To",
    -font		=> $font,
    )->pack (-side => "left", -anchor => "w", -fill => "both", -expand => 1);
$f_tgt->Entry (
    -width		=> 13,
    -textvariable	=> \$t_number,
    -font		=> $font,
    )->pack (-side => "left", -anchor => "w", -fill => "both", -expand => 1);
$f_tgt->Entry (
    -width		=> 13,
    -textvariable	=> \$t_name,
    -font		=> $font,
    )->pack (-side => "left", -anchor => "w", -fill => "both", -expand => 1);
my $b = $f_tgt->BrowseEntry (
    -width		=> 40,
    -borderwidt		=> 2,
    -highlightthickness => 0,
    -autolistwidth	=> 1,
    -variable		=> \$t_entry,
    -browse2cmd		=> sub {
	($t_number, $t_name) = @{$pb[$_[1]]}[1, 2];
	printf STDERR "%3d: %-13s %-20.20s = %s\n", $_[1], $t_number, $t_name, $t_entry;
	},
    -relief		=> "sunken",
    -font		=> $font,
    )->pack (-side => "right", -anchor => "e", -fill => "both", -expand => 1);

{   my $maxlen = max map { length $_->[2] } @pb;
    $_->[3] = sprintf "%3d: %-*s %s", $_->[0], $maxlen, $_->[2], $_->[1] for @pb;
    }
$b->insert ("end", $_) for map { $_->[3] } @pb;

my $t = $f_msg->Text (
    -width		=> 80,
    -height		=>  2,
    -wrap		=> "word",
    -font		=> $font,
    )->pack (-side => "left",  -anchor => "w", -fill => "both", -expand => 1);
$t->insert ("end", $msg);

$f_btn->Button (
    -text		=> "Cancel",
    -command		=> sub { exit; },
    )->pack (-side => "left",  -anchor => "w", -fill => "none", -expand => 0);
my $l_stat = $f_btn->Label (
    -textvariable	=> \$status,
    -font		=> $font,
    -width		=> 40,
    )->pack (-side => "left",  -anchor => "c", -fill => "both", -expand => 1);
$f_btn->Button (
    -text		=> " Send ",
    -command		=> sub { send_msg ($t_number, $t->get ("0.0", "end")) },
    )->pack (-side => "right", -anchor => "e", -fill => "none", -expand => 0);

sub send_msg
{
    my ($dest, $message) = @_;
    $message =~ s/\s+$//;
    $message =~ s/^\s+//;
    $opt_v and print STDERR "To:  $dest ($t_name)\nMsg: $message\n";
    unless ($dest =~ m/^\+?[0-9]+$/ and $message =~ m/^\S/) {
	$status = "Both number and message needed";
	$l_stat->configure (-foreground => "Red");
	return;
	}
    my $b8 = ($message =~ m/^[ -~]+$/) ? 0 : 1;
    $status = "Connecting ...";
    $l_stat->configure (-foreground => "Black");
    $mw->update;
#   $gsm->connect ();
    $status = "Sending ...";
    $mw->update;
    my $err = $gsm->SendSMS ({
	destination	=> $dest,
	smscindex	=> 1,
	report		=> 1,
	eightbit	=> $b8,
	message		=> $message,
	});
    if (defined $err and $err == 0) {
	$status = "Message sent";
	$l_stat->configure (-foreground => "#00a000");
	}
    else {
	$status = $gsm->{ERROR} || "ERROR: ".DPeek $err;
	$l_stat->configure (-foreground => "#d00000");
	}
#   $gsm->disconnect;
    $err;
    } # send_msg

MainLoop;
